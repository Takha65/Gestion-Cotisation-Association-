/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static jdk.nashorn.internal.objects.NativeArray.map;

/**
 *
 * @author macbookpro
 */
public class new_cotisation extends javax.swing.JFrame {

            int i=0,j=0,k=0,L=0,M=0;// compteurs 

    /**
     * Creates new form new_cotisation
     */
    public new_cotisation() {
        initComponents();
        try {
            load_table_Cotisation();
        } catch (SQLException ex) {
            Logger.getLogger(new_cotisation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("Gestion_Cotisation?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        membre_1Query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT m FROM Membre_1 m");
        membre_1List = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : membre_1Query.getResultList();
        cotiseleMoisQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT c FROM CotiseleMois c");
        cotiseleMoisList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : cotiseleMoisQuery.getResultList();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        exit1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Btn_save_cotisation = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_cotisation = new javax.swing.JTable();
        jMatricule = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        JAnnee = new javax.swing.JTextField();
        btn_supp = new javax.swing.JButton();

        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setMinimumSize(new java.awt.Dimension(860, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(854, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(45, 118, 232));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Nouvelle Cotisation");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 60, -1, -1));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/add_cotisation.png"))); // NOI18N
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 50, 60, 50));

        exit1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        exit1.setForeground(new java.awt.Color(204, 0, 0));
        exit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/icons8_Exit_25px.png"))); // NOI18N
        exit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exit1MousePressed(evt);
            }
        });
        jPanel2.add(exit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 160));

        jComboBox2.setBackground(new java.awt.Color(45, 118, 232));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet ", "Aout", "Septembre", "Octobre", "Novembre", "Décembre" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 210, 160, -1));

        jLabel1.setText("Matricule Membre:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 130, 20));

        jLabel2.setText("Année:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 190, 50, 20));

        jButton1.setBackground(new java.awt.Color(0, 204, 204));
        jButton1.setText("AJouter à la liste");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 210, 140, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Membre", "Mois", "Annee"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 410, 290));

        Btn_save_cotisation.setFont(new java.awt.Font("Lucida Sans", 1, 13)); // NOI18N
        Btn_save_cotisation.setText("Sauvegarder");
        Btn_save_cotisation.setEnabled(false);
        Btn_save_cotisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_save_cotisationActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_save_cotisation, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 450, 130, 40));

        jLabel3.setText("Meme s'il y'a duplicata le logiciel prend en compte qu'une seule cotisation pour un mois par membre !");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, 650, 20));

        jLabel4.setText("Liste des cotisation à enregistrer");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 560, 210, -1));

        jLabel5.setText("Liste des cotisations par membre");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 550, 210, -1));

        jTable_cotisation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Membre", "Mois"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable_cotisation);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 260, 290, 280));

        jMatricule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMatriculeActionPerformed(evt);
            }
        });
        jPanel1.add(jMatricule, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 130, -1));

        jLabel6.setText("Mois:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 50, 20));

        JAnnee.setText("2020");
        JAnnee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JAnneeActionPerformed(evt);
            }
        });
        JAnnee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JAnneeKeyTyped(evt);
            }
        });
        jPanel1.add(JAnnee, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 210, 80, -1));

        btn_supp.setBackground(new java.awt.Color(255, 51, 51));
        btn_supp.setText("Supprimer ligne");
        btn_supp.setEnabled(false);
        btn_supp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_suppActionPerformed(evt);
            }
        });
        jPanel1.add(btn_supp, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 946, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
      
    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        //this.setLocation(x - xx, y - xy);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        // TODO add your handling code here:
      //  xx = evt.getX();
      //  xy = evt.getY();
    }//GEN-LAST:event_jPanel2MousePressed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Btn_save_cotisation.setEnabled(true);
        String membre = (String) jMatricule.getText();
        int annee = Integer.parseInt(JAnnee.getText());
        String mois = (String) jComboBox2.getSelectedItem();
        if(!membre.equals("") ){
            try {
             ResultSet rs = new Database_Connect().returnMemberInfos(membre);
             if(rs.next()){
                String id= rs.getString("id"); 
                String prenom = rs.getString("prenom");
                String nom = rs.getString("nom");

                jTable1.setValueAt(id+" "+prenom+" "+nom,i,j);
                jTable1.setValueAt(mois, i, j+1);
                jTable1.setValueAt(annee, i, j+2);
                i++;
                M++;
                if(i==15)
                  JOptionPane.showMessageDialog(this,"Vous avez atteint le nombre maximal d'insertion simultanée ","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);

             }
             else{
                JOptionPane.showMessageDialog(this,"Cette matricule n'existe pas","Erreur !!",JOptionPane.INFORMATION_MESSAGE,null);
 
             }



            } catch (SQLException ex) {
                Logger.getLogger(new_cotisation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
            JOptionPane.showMessageDialog(this,"Veuiller renseigner la matricule!!! ","Erreur !!",JOptionPane.INFORMATION_MESSAGE,null);
   
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Btn_save_cotisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_save_cotisationActionPerformed
        M=0;
        try {
            // TODO add your handling code here:
            //HashMap<Integer,String> membres= new Database_Connect().loadMembre();
            int bon_insert=0;
            ArrayList<String> bad_inserts = new ArrayList<String>();
            ArrayList<String> precedent = new ArrayList<String>();

            // je convoque le hashmap contenant les données de la base de données pour pouvoir recuperer 
            // les identifiants des membres et ainsi faire une insertion de cotisation 
            //  int dim=jTable1.getValueAt(ERROR, NORMAL) ;
            while(k<jTable1.getRowCount()){
                String membre = (String) jTable1.getValueAt(k, L);
                String mois=(String) jTable1.getValueAt(k, L+1);
                Object annee=  jTable1.getValueAt(k, L+2);
                k++;
                StringTokenizer st;
                if(membre == null) {
                } else {
                    st= new StringTokenizer(membre);
                    int id_membre= Integer.parseInt(st.nextToken());
                    System.out.println(membre+""+mois+annee);
                    int verifier_mois_prec= new Database_Connect().verifierMoisPrecedent(id_membre, mois, (int) annee);
                    
                    if(verifier_mois_prec==0){
                        // membre en norme 
                        boolean bool=new Database_Connect().SaveCotisation(id_membre,mois, (int) annee);
                        if(!bool)
                           // bad_insert++;
                            bad_inserts.add(membre);
                        else
                            bon_insert ++;
                    }
                    else if(verifier_mois_prec==1){
                        // n'ayant pas cotisé le mois précédent 
                        //JOptionPane.showMessageDialog(this,"Le membre "+membre+" n'a pas cotisé pour le mois "+new Database_Connect().returnMoisPrecedent(mois, (int) annee)+" \n Veuiller cotisé pour ce mois d'abord!!!","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);
                        precedent.add(membre);
                    }
                    else if(verifier_mois_prec==-1){
                        //nouveau membre 
                        try{
                            ResultSet rs = new Database_Connect().returnMemberInfos(id_membre);
                            System.out.println("index "+id_membre);
                            if(rs.next()){
                                String adhesion= mois+" "+annee;
                                Membre m = new Membre(rs.getString("prenom"),rs.getString("nom"),rs.getString("poste"),rs.getString("matricule"),rs.getString("adresse"),Integer.parseInt(rs.getString("numero")),rs.getString("etat"),adhesion);
                                new Database_Connect().UpdateMembreOnDB(m, id_membre); 
                            }
                            
                            
                        }
                        catch(Exception e){
                            System.out.println("Une erreur !!!!!!!!!!!!!!!!");
                        }
                        new Database_Connect().SaveCotisation(id_membre,mois, (int) annee);
                        bon_insert ++;
                    }
                    else if(verifier_mois_prec==2){
                            bad_inserts.add(membre);          
                        //  JOptionPane.showInputDialog(null, "Membre(s) ayant déjà cotisé ce mois !!!", "ATTENTION ", JOptionPane.QUESTION_MESSAGE, null,null, null);

                    }
             
                }

                        /*if(bool){
                            clearTable(jTable1);
                            i=j=k=L=0;
                            JOptionPane.showMessageDialog(this,"Insertion réussie !!! ","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);
                            //return ;
                            
                        }
                        else{
                            clearTable(jTable1);
                            i=j=k=L=0;
                            JOptionPane.showMessageDialog(this,"Attention un des membres a déjà cotisé pour ce mois !!! ","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);
                            //return ; 
                        }*/
                        
                    
                
                    
               // if(membres.containsValue(membre))
               // System.out.println(membre+" "+mois);         
            }
            
            if(bad_inserts.size()!=0){
               //JOptionPane.showMessageDialog(this,"Attention ce(s) membre(s) avait(ent) déjà cotisé pour ce mois !!!","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);
               //System.out.println("bad : "+bad_insert);
               // bad_insert++;
                System.out.print("Ces membres ont déja cotisé pour ce mois");
                for(String m : bad_inserts){
                    System.out.print(""+m+", ");
                }
            Object[] options = bad_inserts.toArray();
            JOptionPane.showInputDialog(null, "Membre(s) ayant déjà cotisé ce mois !!!", "ATTENTION ", JOptionPane.QUESTION_MESSAGE, null,options, options[0]);
                
                
               clearTable2(jTable1);
               load_table_Cotisation(); 
               i=j=k=L=0;
               Btn_save_cotisation.setEnabled(false);
               btn_supp.setEnabled(false);
               bad_inserts.clear();
            }
            if(precedent.size()!=0){
               clearTable2(jTable1);
                i=j=k=L=0;
                 System.out.println("Ces membres n'ont pas  cotisé pour le  mois précédent");
                for(String m : precedent){
                    System.out.print(""+m+", ");
                }
                //JOptionPane.showMessageDialog(this,"Insertion réussie !!! ","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);
                Object[] options = precedent.toArray();
                JOptionPane.showInputDialog(null, "Membre(s) n'ayant pas cotisé le mois précédent \n Veuiller cotisé pour le mois précédent d'abord !!!", "ATTENTION ", JOptionPane.QUESTION_MESSAGE, null,options, options[0]);



                clearTable(jTable_cotisation);
                load_table_Cotisation(); 
                Btn_save_cotisation.setEnabled(false);
                btn_supp.setEnabled(false);
                precedent.clear();
                
              
            }
            if(bon_insert>0){
                JOptionPane.showMessageDialog(this,"Insertion réussie !!! ","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);
                clearTable(jTable_cotisation);
                clearTable2(jTable1);
                load_table_Cotisation(); 
                Btn_save_cotisation.setEnabled(false);
                btn_supp.setEnabled(false);
                precedent.clear();
            }
            
        } 
        catch (SQLException ex) {
            Logger.getLogger(new_cotisation.class.getName()).log(Level.SEVERE, null, ex);
            //JOptionPane.showMessageDialog(this,"Attention un des membres a déjà cotisé pour ce mois !!! ","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);

        }
         
    }//GEN-LAST:event_Btn_save_cotisationActionPerformed

    private void exit1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit1MousePressed
        // TODO add your handling code here:
        if(M==0)
        this.setVisible(false);
        else{
            int rep = showConfirmDialog();
            if(rep==0){
                this.setVisible(false);
            }
            
                
        }
           
    }//GEN-LAST:event_exit1MousePressed

    private void jMatriculeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMatriculeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMatriculeActionPerformed

    private void JAnneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JAnneeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JAnneeActionPerformed

    private void btn_suppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_suppActionPerformed
        // TODO add your handling code here:
        int i = jTable1.getSelectedRow();
        if(jTable1.getValueAt(i,0)==null){
            //System.err.println("erreur");
            JOptionPane.showMessageDialog(this,"Cette ligne est déjà vide !!! ","Notification !!",JOptionPane.INFORMATION_MESSAGE,null);
        }
        else{
            jTable1.setValueAt(null, i, 0);
            jTable1.setValueAt(null, i, 1);
            jTable1.setValueAt(null, i, 2);  
            M--;
        }
      
        
    }//GEN-LAST:event_btn_suppActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        btn_supp.setEnabled(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void JAnneeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JAnneeKeyTyped
        // TODO add your handling code here:
        keyTyped(evt);
        
    }//GEN-LAST:event_JAnneeKeyTyped
    public void loadCombo(JComboBox JC) throws SQLException{
        // charger la combobox avec les données de la base 
        HashMap<Integer,String> membres= new Database_Connect().loadMembre();
        for(Map.Entry mapentry : membres.entrySet()){
          JC.addItem((String) mapentry.getValue());
        }
        
    }
    
    public void clearTable(JTable jT){
        // permet de vider la table
        for(int m=0;m<jT.getRowCount();m++){
            jT.setValueAt(null, m, 0);
            jT.setValueAt(null, m, 1);
            
        }
    }
    public void clearTable2(JTable jT){
        // permet de vider la table à 3 colonnes 
        for(int m=0;m<jT.getRowCount();m++){
            jT.setValueAt(null, m, 0);
            jT.setValueAt(null, m, 1);
            jT.setValueAt(null, m, 2);

            
        }
    }
    public void keyTyped(KeyEvent k)  
     {  
         // cette methode permet le refus d'entrer de lettre sur un champ !!
      if (! Character.isDigit(k.getKeyChar()))  
      {  
       k.consume();
      }    
    }
    static int showConfirmDialog(){
         
        return JOptionPane.showConfirmDialog(
        null,
        "Vous n'avez pas enregistrer \n Voulez-vous vraiment quitter ?",
        "Quitter",
        JOptionPane.YES_NO_OPTION);
    }
    public void load_table_Cotisation() throws SQLException{
        // cette methode permet de charger la table des cotisations 
        // avec les données de la base de données $
        ArrayList<String> cotisations= new Database_Connect().load_Cotisation(2020);
        System.out.println("size "+cotisations.size()); 
        int a=0,b=0; // compteurs 
        for(String cotisation : cotisations){
            StringTokenizer cotis= new StringTokenizer(cotisation);
            jTable_cotisation.setValueAt(cotis.nextToken()+" "+cotis.nextToken()+" "+cotis.nextToken(), a, b);
            jTable_cotisation.setValueAt(cotis.nextToken(), a, b+1);

            a++;
            
            
        }

        

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(new_cotisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(new_cotisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(new_cotisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(new_cotisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new new_cotisation().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_save_cotisation;
    private javax.swing.JTextField JAnnee;
    private javax.swing.JButton btn_supp;
    private java.util.List<main.CotiseleMois> cotiseleMoisList;
    private javax.persistence.Query cotiseleMoisQuery;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JLabel exit1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jMatricule;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable_cotisation;
    private java.util.List<main.Membre_1> membre_1List;
    private javax.persistence.Query membre_1Query;
    // End of variables declaration//GEN-END:variables
}
